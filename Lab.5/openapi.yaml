openapi: 3.0.0
info:
  description: ''
  version: 1.0.0
  title: Calendar of events
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/PavloYend/Lab5/1.0.0
  - url: https://petstore.swagger.io/v2
tags:
  - name: event
  - name: user
  - name: connection
paths:
  /event:
    post:
      tags:
        - event
      summary: Add a new event
      operationId: addEvent
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Event'
    put:
      tags:
        - event
      summary: Update an existing event
      operationId: updateEvent
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Event'
  /event/{eventId}:
    get:
      tags:
        - event
      summary: Find event by ID
      description: Returns a single event
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
    post:
      tags:
        - event
      summary: Updates a event with form data
      operationId: updateEventWithForm
      parameters:
        - name: eventId
          in: path
          description: ID of event that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                status:
                  description: Updated status of the event
                  type: string
    delete:
      tags:
        - event
      summary: Deletes an event
      operationId: deleteEvent
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: eventId
          in: path
          description: Event id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
  
  /event/{eventId}/user/{userId}:
    post:
      tags:
      - connection
      summary: Add user to event
      operationId: AddUserToEvent
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid ID supplied
        '200':
          description: successful operation
  
  /your_events/user/{userId}:
    get:
      tags:
      - connection
      summary: Get user's event
      operationId: GetUsersEvent
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
         description: successful operation
         content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
  
  /event/{eventId}/users/:
    get:
      tags:
      - connection
      summary: Get users in event.
      operationId: GetUsersInEvent
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
         description: successful operation
         content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
  
  /events/user/{userId}:
    get:
      tags:
      - connection
      summary: Get event for user
      operationId: GetEventWithUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
         description: successful operation
         content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
  
  /user:
    post:
      tags:
        - user
      summary: Add user
      description: This can only be done by the logged in user.
      operationId: addUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Add user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  
  /user/{userId}:
    get:
      tags:
       - user
      summary: Get all user info
      operationId: GetUserInfo
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
      responses:
        "400":
          description: Invalid username supplied
        '200':
          description: Succesful operation
          content:
           application/json:
                schema:
                  type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    subscription_events:
                       type: array
                       items:
                         $ref: "#/components/schemas/Event"
                    created_events:
                        type: array
                        items:
                          $ref: "#/components/schemas/Event"
  
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Event
  requestBodies:
    Event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
        application/xml:
          schema:
            $ref: '#/components/schemas/Event'
      description: Event object that needs to be added
      required: true
